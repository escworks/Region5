using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Text;

using Csla;
using Csla.Security;
using Csla.Data;

namespace tx_esc_04.BusinessObect.Accountability
{
    [Serializable()]
    public class Site : BusinessBase<Site>
    {
        #region Properties

        private static PropertyInfo<int> KeyProperty = RegisterProperty<int>(new PropertyInfo<int>("key"));
        public int Key
        {
            get { return GetProperty(KeyProperty); }
            set { SetProperty(KeyProperty, value); }
        }

        private static PropertyInfo<int> ObjIdProperty = RegisterProperty<int>(new PropertyInfo<int>("obj_id"));
        public int ObjId
        {
            get { return GetProperty(ObjIdProperty); }
            set { SetProperty(ObjIdProperty, value); }
        }

        private static PropertyInfo<int> SiteIdProperty = RegisterProperty<int>(new PropertyInfo<int>("site_id"));
        public int SiteId
        {
            get { return GetProperty(SiteIdProperty); }
            set { SetProperty(SiteIdProperty, value); }
        }

        private static PropertyInfo<string> SiteNameProperty = RegisterProperty<string>(new PropertyInfo<string>("site_name"));
        public string SiteName
        {
            get { return GetProperty(SiteNameProperty); }
            set { SetProperty(SiteNameProperty, value); }
        }

        #endregion

        #region Factory Methods

        private Site()
        { /* require use of factory methods */ }

        internal static Site NewSite()
        {
            return DataPortal.CreateChild<Site>();
        }

        internal static Site GetSite(SafeDataReader dr)
        {

            return DataPortal.FetchChild<Site>(dr);
        }

        #endregion

        #region DataAccess
        protected override void Child_Create()
        {
            using (BypassPropertyChecks)
            {
                this.Key = -1;
            }
        }

        public static Site CreateNew()
        {
            return NewSite();
        }

        private void Child_Fetch(SafeDataReader dr)
        {
            MapFieldsFromData(dr);
        }

        protected void MapFieldsFromData(SafeDataReader dr)
        {
            using (BypassPropertyChecks)
            {
                LoadProperty(KeyProperty, dr.GetInt32("key"));
                LoadProperty(ObjIdProperty, dr.GetInt32("obj_id"));
                LoadProperty(SiteIdProperty, dr.GetInt32("site_id"));
                LoadProperty(SiteNameProperty, dr.GetString("site_name"));

            }
        }

        protected void Child_Insert(Assistance assistance, SqlConnection cn)
        {
            if (this.IsNew)
            {
                using (SqlCommand cmd = cn.CreateCommand())
                {
                    this.ObjId = assistance.ObjId;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "ItsSitesInsert";
                    cmd.Parameters.AddWithValue("@key", this.Key).Direction = ParameterDirection.Output;

                    this.MapFieldsToParams(cmd);
                    cmd.ExecuteNonQuery();
                    this.Key = Convert.ToInt32(cmd.Parameters["@key"].Value);
                }
            }
        }

        protected void Child_DeleteSelf(Assistances a)
        {
            if (this.IsDeleted)
            {
                using (SqlConnection cn = region4.Common.DataConnection.DbConnection)
                {
                    cn.Open();
                    using (SqlCommand cmd = cn.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "ItsSitesDelete";
                        cmd.Parameters.AddWithValue("@obj_id", this.ObjId);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
        }

        protected void MapFieldsToParams(SqlCommand cmd)
        {
            cmd.Parameters.AddWithValue("@obj_id", ObjId);
            cmd.Parameters.AddWithValue("@site_id", SiteId);
        }

        #endregion
    }
}
